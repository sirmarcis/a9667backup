#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <cassert>
#include <iomanip>
#include <cmath>
#include <map>
#include <unordered_map>
#include <utility>

// ======================================================================================

// Helper function to read the provided font from a file.  The format
// of the font file is described in comments below.  The width,
// height, and bitmap_letters variables are set by this function.
void ReadFont(const std::string &font_file,
	      int &width,
	      int &height,
	      int &numChars,
	      std::map<char, std::string(std::string)> &bitmap_map) {

  // open the font file for reading
  std::ifstream istr(font_file.c_str());
  if (!istr) {
    std::cerr << "ERROR: cannot open font file " << font_file << std::endl;
    return;
  }

  // read in the width & height for every character in the file
  istr >> width >> height;
  assert (width >= 1);
  assert (height >= 1);

  // Create a vector to store all 256 ASCII characters of the
  // characters.  Each character is represented as a vector of
  // <height> strings that are each <width> wide.  Initially the
  // characters are unknown (represented with the '?' character).
  std::vector<std::vector<std::string> > bitmap_letters = std::vector<std::vector<std::string> >
    ( 256, std::vector<std::string> ( height, std::string(width, '?')));

  // read in all the characters
  // first is the ascii integer representation of the character
  int ascii;
  while (istr >> ascii) {
    assert (ascii >= 0 && ascii < 256);
    // next the character is printed in single quotes
    char c;
    istr >> c;
    assert (c == '\'');
    // use std::noskiwps to make sure we can read the space character correctly
    istr >> std::noskipws >> c;
    // verify that the ascii code matches the character
    assert (c == (char)ascii);
    // switch back to std::skipws mode
    istr >> std::skipws >> c;
    assert (c == '\'');
    // read in the letter
    std::vector<std::string> bitmap;
    std::string tmp;
    for (int i = 0; i < height; i++) {
      istr >> tmp;
      assert ((int)tmp.size() == width);
      // make sure the letter uses only '#' and '.' characters
      for (unsigned int j = 0; j < tmp.size(); j++) {
        assert (tmp[j] == '.' || tmp[j] == '#');
      }
      bitmap.push_back(tmp);
    }
    // overwrite the initially unknown letter in the vector
    bitmap_map[char(ascii)] = bitmap;
    bitmap_letters[ascii] = bitmap;
  }
  numChars = bitmap_letters.size();
}

// ======================================================================================

void
getOutput(std::map<char, std::string(std::string)>, int numChars){
	std::string(std::string) curr_bitmap;
}

int
main(int argc, char* argv[]){
	if(std::string(argv[1]) == std::string("display")){
		std::string font_map_txt = std::string(argv[2]), output_string = std::string(argv[3]);
		char foreground = argv[4], backround = argv[5];
		std::map<char, std::string(std::string)> bitmap_map;
		int width, height, numChars;
		ReadFont(font_map_txt, width, height, numChars, bitmap_map);


	}
	else if (std::string(argv[1]) == std::string("read")){

	}
	else std::cout << "ERROR: invalid command argument" << std::endl;
	return 0;
}
